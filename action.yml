name: Dokploy Deployer
description: Trigger a deployment on Dokploy, either for an application or a compose project using direct IDs.
author: thinesjs <thinesfb@gmail.com>
branding:
  icon: upload-cloud
  color: orange

inputs:
  dokploy_url:
    description: Dokploy base url, with api access at https://<deploy_url>/api
    required: true
  api_key:
    description: Dokploy api key, generate from https://<deploy_url>/dashboard/settings/profile
    required: true
  type:
    description: Dokploy deployment type. Valid values - `application`, `compose`.
    default: application
  compose_id:
    description: Dokploy compose id (required when type=compose).
    default: ""
  application_id:
    description: Dokploy application id (required when type=application).
    default: ""
  wait_for_deployment:
    description: Wait for deployment to complete and check status. Valid values - `true`, `false`.
    default: "false"
  deployment_check_interval:
    description: Deployment status check interval in seconds (default 30 seconds).
    default: "30"
  deployment_timeout:
    description: Maximum time to wait for deployment completion in seconds (default 1200 seconds = 20 minutes).
    default: "1200"
  max_retries:
    description: Maximum number of retries for failed API calls (default 5).
    default: "5"

outputs:
  deployment_status:
    description: Final deployment status (when wait_for_deployment is enabled)
    value: ${{ steps.poll-application-status.outputs.status || steps.poll-compose-status.outputs.status }}

runs:
  using: composite
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        if [[ "${{ inputs.type }}" != "application" && "${{ inputs.type }}" != "compose" ]]; then
          echo "❌ Invalid type: ${{ inputs.type }} (must be 'application' or 'compose')" >&2
          exit 1
        fi
        if [[ "${{ inputs.type }}" == "application" && -z "${{ inputs.application_id }}" ]]; then
          echo "❌ application_id is required when type=application" >&2
          exit 1
        fi
        if [[ "${{ inputs.type }}" == "compose" && -z "${{ inputs.compose_id }}" ]]; then
          echo "❌ compose_id is required when type=compose" >&2
          exit 1
        fi

    - name: Deploy Application
      if: ${{ inputs.type == 'application' }}
      shell: bash
      env:
        DOKPLOY_URL: ${{ inputs.dokploy_url }}
        DOKPLOY_API_KEY: ${{ inputs.api_key }}
        APPLICATION_ID: ${{ inputs.application_id }}
      run: |
        echo "🚀 Triggering application deployment: $APPLICATION_ID"
        response=$(curl -X POST -s -o /dev/null -w "%{http_code}" \
          -H 'Accept: application/json' \
          -H 'Content-Type: application/json' \
          -H "x-api-key: $DOKPLOY_API_KEY" \
          -d "{\"applicationId\": \"$APPLICATION_ID\"}" \
          "$DOKPLOY_URL/api/application.deploy")

        if [ "$response" -ne 200 ]; then
          echo "❌ Application deployment failed with status code: $response"
          exit 1
        fi
        echo "✅ Application deployment triggered successfully!"

    - name: Deploy Compose
      if: ${{ inputs.type == 'compose' }}
      shell: bash
      env:
        DOKPLOY_URL: ${{ inputs.dokploy_url }}
        DOKPLOY_API_KEY: ${{ inputs.api_key }}
        COMPOSE_ID: ${{ inputs.compose_id }}
      run: |
        echo "🚀 Triggering compose deployment: $COMPOSE_ID"
        response=$(curl -X POST -s -o /dev/null -w "%{http_code}" \
          -H 'Accept: application/json' \
          -H 'Content-Type: application/json' \
          -H "x-api-key: $DOKPLOY_API_KEY" \
          -d "{\"composeId\": \"$COMPOSE_ID\"}" \
          "$DOKPLOY_URL/api/compose.deploy")

        if [ "$response" -ne 200 ]; then
          echo "❌ Compose deployment failed with status code: $response"
          exit 1
        fi
        echo "✅ Compose deployment triggered successfully!"

    - name: Wait for Application Deployment
      id: poll-application-status
      if: ${{ inputs.type == 'application' && inputs.wait_for_deployment == 'true' }}
      shell: bash
      env:
        DOKPLOY_URL: ${{ inputs.dokploy_url }}
        DOKPLOY_API_KEY: ${{ inputs.api_key }}
        APPLICATION_ID: ${{ inputs.application_id }}
        DEPLOYMENT_CHECK_INTERVAL: ${{ inputs.deployment_check_interval }}
        DEPLOYMENT_TIMEOUT: ${{ inputs.deployment_timeout }}
        MAX_RETRIES: ${{ inputs.max_retries }}
      run: |
        echo "🔄 Waiting for application deployment to complete..."
        start_time=$(date +%s)
        end_time=$((start_time + DEPLOYMENT_TIMEOUT))
        retry_count=0

        while [ $(date +%s) -lt $end_time ]; do
          response=$(curl -sf \
            -H 'Accept: application/json' \
            -H "x-api-key: $DOKPLOY_API_KEY" \
            "$DOKPLOY_URL/api/deployment.all?applicationId=$APPLICATION_ID" || echo "FETCH_FAILED")
          
          if [ "$response" = "FETCH_FAILED" ]; then
            retry_count=$((retry_count + 1))
            if [ $retry_count -ge $MAX_RETRIES ]; then
              echo "❌ Failed to fetch deployment status after $MAX_RETRIES retries"
              echo "status=error" >> $GITHUB_OUTPUT
              exit 1
            fi
            sleep $DEPLOYMENT_CHECK_INTERVAL
            continue
          fi
          
          # Reset retry count on successful API call
          retry_count=0
          
          # Get the latest deployment status
          status=$(echo "$response" | jq -r 'if type == "array" and length > 0 then .[0].status else "unknown" end')
          
          case "$status" in
            "done")
              echo "✅ Deployment completed successfully"
              echo "status=done" >> $GITHUB_OUTPUT
              exit 0
              ;;
            "error")
              echo "❌ Deployment failed"
              echo "status=error" >> $GITHUB_OUTPUT
              exit 1
              ;;
            "running"|"idle"|*)
              # Continue waiting for completion
              ;;
          esac
          
          sleep $DEPLOYMENT_CHECK_INTERVAL
        done

        echo "❌ Deployment timeout after $DEPLOYMENT_TIMEOUT seconds"
        echo "status=timeout" >> $GITHUB_OUTPUT
        exit 1

    - name: Wait for Compose Deployment
      id: poll-compose-status
      if: ${{ inputs.type == 'compose' && inputs.wait_for_deployment == 'true' }}
      shell: bash
      env:
        DOKPLOY_URL: ${{ inputs.dokploy_url }}
        DOKPLOY_API_KEY: ${{ inputs.api_key }}
        COMPOSE_ID: ${{ inputs.compose_id }}
        DEPLOYMENT_CHECK_INTERVAL: ${{ inputs.deployment_check_interval }}
        DEPLOYMENT_TIMEOUT: ${{ inputs.deployment_timeout }}
        MAX_RETRIES: ${{ inputs.max_retries }}
      run: |
        echo "🔄 Waiting for compose deployment to complete..."
        start_time=$(date +%s)
        end_time=$((start_time + DEPLOYMENT_TIMEOUT))
        retry_count=0

        while [ $(date +%s) -lt $end_time ]; do
          response=$(curl -sf \
            -H 'Accept: application/json' \
            -H "x-api-key: $DOKPLOY_API_KEY" \
            "$DOKPLOY_URL/api/deployment.allByCompose?composeId=$COMPOSE_ID" || echo "FETCH_FAILED")
          
          if [ "$response" = "FETCH_FAILED" ]; then
            retry_count=$((retry_count + 1))
            if [ $retry_count -ge $MAX_RETRIES ]; then
              echo "❌ Failed to fetch deployment status after $MAX_RETRIES retries"
              echo "status=error" >> $GITHUB_OUTPUT
              exit 1
            fi
            sleep $DEPLOYMENT_CHECK_INTERVAL
            continue
          fi
          
          # Reset retry count on successful API call
          retry_count=0
          
          # Get the latest deployment status
          status=$(echo "$response" | jq -r 'if type == "array" and length > 0 then .[0].status else "unknown" end')
          
          case "$status" in
            "done")
              echo "✅ Deployment completed successfully"
              echo "status=done" >> $GITHUB_OUTPUT
              exit 0
              ;;
            "error")
              echo "❌ Deployment failed"
              echo "status=error" >> $GITHUB_OUTPUT
              exit 1
              ;;
            "running"|"idle"|*)
              # Continue waiting for completion
              ;;
          esac
          
          sleep $DEPLOYMENT_CHECK_INTERVAL
        done

        echo "❌ Deployment timeout after $DEPLOYMENT_TIMEOUT seconds"
        echo "status=timeout" >> $GITHUB_OUTPUT
        exit 1
